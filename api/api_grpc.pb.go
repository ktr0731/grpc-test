// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleClient interface {
	Unary(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryMessage(ctx context.Context, in *UnaryMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryRepeated(ctx context.Context, in *UnaryRepeatedRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryRepeatedMessage(ctx context.Context, in *UnaryRepeatedMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryRepeatedEnum(ctx context.Context, in *UnaryRepeatedEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnarySelf(ctx context.Context, in *UnarySelfRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryMap(ctx context.Context, in *UnaryMapRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryMapMessage(ctx context.Context, in *UnaryMapMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryOneof(ctx context.Context, in *UnaryOneofRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryEnum(ctx context.Context, in *UnaryEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryBytes(ctx context.Context, in *UnaryBytesRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryHeader(ctx context.Context, in *UnaryHeaderRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryHeaderTrailer(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryHeaderTrailerFailure(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryWithMapResponse(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*MapResponse, error)
	UnaryEcho(ctx context.Context, in *UnaryMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_ClientStreamingClient, error)
	ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (Example_ServerStreamingClient, error)
	BidiStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_BidiStreamingClient, error)
}

type exampleClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleClient(cc grpc.ClientConnInterface) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) Unary(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryMessage(ctx context.Context, in *UnaryMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryRepeated(ctx context.Context, in *UnaryRepeatedRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryRepeated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryRepeatedMessage(ctx context.Context, in *UnaryRepeatedMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryRepeatedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryRepeatedEnum(ctx context.Context, in *UnaryRepeatedEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryRepeatedEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnarySelf(ctx context.Context, in *UnarySelfRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnarySelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryMap(ctx context.Context, in *UnaryMapRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryMapMessage(ctx context.Context, in *UnaryMapMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryMapMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryOneof(ctx context.Context, in *UnaryOneofRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryOneof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryEnum(ctx context.Context, in *UnaryEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryBytes(ctx context.Context, in *UnaryBytesRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryHeader(ctx context.Context, in *UnaryHeaderRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryHeaderTrailer(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryHeaderTrailer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryHeaderTrailerFailure(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryHeaderTrailerFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryWithMapResponse(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*MapResponse, error) {
	out := new(MapResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryWithMapResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryEcho(ctx context.Context, in *UnaryMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.Example/UnaryEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[0], "/api.Example/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleClientStreamingClient{stream}
	return x, nil
}

type Example_ClientStreamingClient interface {
	Send(*SimpleRequest) error
	CloseAndRecv() (*SimpleResponse, error)
	grpc.ClientStream
}

type exampleClientStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleClientStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleClientStreamingClient) CloseAndRecv() (*SimpleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (Example_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[1], "/api.Example/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_ServerStreamingClient interface {
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type exampleServerStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleServerStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) BidiStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_BidiStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[2], "/api.Example/BidiStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleBidiStreamingClient{stream}
	return x, nil
}

type Example_BidiStreamingClient interface {
	Send(*SimpleRequest) error
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type exampleBidiStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleBidiStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleBidiStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServer is the server API for Example service.
// All implementations must embed UnimplementedExampleServer
// for forward compatibility
type ExampleServer interface {
	Unary(context.Context, *SimpleRequest) (*SimpleResponse, error)
	UnaryMessage(context.Context, *UnaryMessageRequest) (*SimpleResponse, error)
	UnaryRepeated(context.Context, *UnaryRepeatedRequest) (*SimpleResponse, error)
	UnaryRepeatedMessage(context.Context, *UnaryRepeatedMessageRequest) (*SimpleResponse, error)
	UnaryRepeatedEnum(context.Context, *UnaryRepeatedEnumRequest) (*SimpleResponse, error)
	UnarySelf(context.Context, *UnarySelfRequest) (*SimpleResponse, error)
	UnaryMap(context.Context, *UnaryMapRequest) (*SimpleResponse, error)
	UnaryMapMessage(context.Context, *UnaryMapMessageRequest) (*SimpleResponse, error)
	UnaryOneof(context.Context, *UnaryOneofRequest) (*SimpleResponse, error)
	UnaryEnum(context.Context, *UnaryEnumRequest) (*SimpleResponse, error)
	UnaryBytes(context.Context, *UnaryBytesRequest) (*SimpleResponse, error)
	UnaryHeader(context.Context, *UnaryHeaderRequest) (*SimpleResponse, error)
	UnaryHeaderTrailer(context.Context, *SimpleRequest) (*SimpleResponse, error)
	UnaryHeaderTrailerFailure(context.Context, *SimpleRequest) (*SimpleResponse, error)
	UnaryWithMapResponse(context.Context, *SimpleRequest) (*MapResponse, error)
	UnaryEcho(context.Context, *UnaryMessageRequest) (*SimpleResponse, error)
	ClientStreaming(Example_ClientStreamingServer) error
	ServerStreaming(*SimpleRequest, Example_ServerStreamingServer) error
	BidiStreaming(Example_BidiStreamingServer) error
	mustEmbedUnimplementedExampleServer()
}

// UnimplementedExampleServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (UnimplementedExampleServer) Unary(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedExampleServer) UnaryMessage(context.Context, *UnaryMessageRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryMessage not implemented")
}
func (UnimplementedExampleServer) UnaryRepeated(context.Context, *UnaryRepeatedRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRepeated not implemented")
}
func (UnimplementedExampleServer) UnaryRepeatedMessage(context.Context, *UnaryRepeatedMessageRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRepeatedMessage not implemented")
}
func (UnimplementedExampleServer) UnaryRepeatedEnum(context.Context, *UnaryRepeatedEnumRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRepeatedEnum not implemented")
}
func (UnimplementedExampleServer) UnarySelf(context.Context, *UnarySelfRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarySelf not implemented")
}
func (UnimplementedExampleServer) UnaryMap(context.Context, *UnaryMapRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryMap not implemented")
}
func (UnimplementedExampleServer) UnaryMapMessage(context.Context, *UnaryMapMessageRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryMapMessage not implemented")
}
func (UnimplementedExampleServer) UnaryOneof(context.Context, *UnaryOneofRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryOneof not implemented")
}
func (UnimplementedExampleServer) UnaryEnum(context.Context, *UnaryEnumRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEnum not implemented")
}
func (UnimplementedExampleServer) UnaryBytes(context.Context, *UnaryBytesRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryBytes not implemented")
}
func (UnimplementedExampleServer) UnaryHeader(context.Context, *UnaryHeaderRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryHeader not implemented")
}
func (UnimplementedExampleServer) UnaryHeaderTrailer(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryHeaderTrailer not implemented")
}
func (UnimplementedExampleServer) UnaryHeaderTrailerFailure(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryHeaderTrailerFailure not implemented")
}
func (UnimplementedExampleServer) UnaryWithMapResponse(context.Context, *SimpleRequest) (*MapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryWithMapResponse not implemented")
}
func (UnimplementedExampleServer) UnaryEcho(context.Context, *UnaryMessageRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}
func (UnimplementedExampleServer) ClientStreaming(Example_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedExampleServer) ServerStreaming(*SimpleRequest, Example_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedExampleServer) BidiStreaming(Example_BidiStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStreaming not implemented")
}
func (UnimplementedExampleServer) mustEmbedUnimplementedExampleServer() {}

// UnsafeExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServer will
// result in compilation errors.
type UnsafeExampleServer interface {
	mustEmbedUnimplementedExampleServer()
}

func RegisterExampleServer(s grpc.ServiceRegistrar, srv ExampleServer) {
	s.RegisterService(&Example_ServiceDesc, srv)
}

func _Example_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).Unary(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryMessage(ctx, req.(*UnaryMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryRepeated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRepeatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryRepeated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryRepeated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryRepeated(ctx, req.(*UnaryRepeatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryRepeatedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRepeatedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryRepeatedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryRepeatedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryRepeatedMessage(ctx, req.(*UnaryRepeatedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryRepeatedEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRepeatedEnumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryRepeatedEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryRepeatedEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryRepeatedEnum(ctx, req.(*UnaryRepeatedEnumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnarySelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnarySelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnarySelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnarySelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnarySelf(ctx, req.(*UnarySelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryMap(ctx, req.(*UnaryMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryMapMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryMapMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryMapMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryMapMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryMapMessage(ctx, req.(*UnaryMapMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryOneof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryOneofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryOneof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryOneof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryOneof(ctx, req.(*UnaryOneofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEnumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryEnum(ctx, req.(*UnaryEnumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryBytes(ctx, req.(*UnaryBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryHeader(ctx, req.(*UnaryHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryHeaderTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryHeaderTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryHeaderTrailer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryHeaderTrailer(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryHeaderTrailerFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryHeaderTrailerFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryHeaderTrailerFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryHeaderTrailerFailure(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryWithMapResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryWithMapResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryWithMapResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryWithMapResponse(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryEcho(ctx, req.(*UnaryMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).ClientStreaming(&exampleClientStreamingServer{stream})
}

type Example_ClientStreamingServer interface {
	SendAndClose(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type exampleClientStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleClientStreamingServer) SendAndClose(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleClientStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).ServerStreaming(m, &exampleServerStreamingServer{stream})
}

type Example_ServerStreamingServer interface {
	Send(*SimpleResponse) error
	grpc.ServerStream
}

type exampleServerStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleServerStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Example_BidiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).BidiStreaming(&exampleBidiStreamingServer{stream})
}

type Example_BidiStreamingServer interface {
	Send(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type exampleBidiStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleBidiStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleBidiStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Example_ServiceDesc is the grpc.ServiceDesc for Example service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Example_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Example_Unary_Handler,
		},
		{
			MethodName: "UnaryMessage",
			Handler:    _Example_UnaryMessage_Handler,
		},
		{
			MethodName: "UnaryRepeated",
			Handler:    _Example_UnaryRepeated_Handler,
		},
		{
			MethodName: "UnaryRepeatedMessage",
			Handler:    _Example_UnaryRepeatedMessage_Handler,
		},
		{
			MethodName: "UnaryRepeatedEnum",
			Handler:    _Example_UnaryRepeatedEnum_Handler,
		},
		{
			MethodName: "UnarySelf",
			Handler:    _Example_UnarySelf_Handler,
		},
		{
			MethodName: "UnaryMap",
			Handler:    _Example_UnaryMap_Handler,
		},
		{
			MethodName: "UnaryMapMessage",
			Handler:    _Example_UnaryMapMessage_Handler,
		},
		{
			MethodName: "UnaryOneof",
			Handler:    _Example_UnaryOneof_Handler,
		},
		{
			MethodName: "UnaryEnum",
			Handler:    _Example_UnaryEnum_Handler,
		},
		{
			MethodName: "UnaryBytes",
			Handler:    _Example_UnaryBytes_Handler,
		},
		{
			MethodName: "UnaryHeader",
			Handler:    _Example_UnaryHeader_Handler,
		},
		{
			MethodName: "UnaryHeaderTrailer",
			Handler:    _Example_UnaryHeaderTrailer_Handler,
		},
		{
			MethodName: "UnaryHeaderTrailerFailure",
			Handler:    _Example_UnaryHeaderTrailerFailure_Handler,
		},
		{
			MethodName: "UnaryWithMapResponse",
			Handler:    _Example_UnaryWithMapResponse_Handler,
		},
		{
			MethodName: "UnaryEcho",
			Handler:    _Example_UnaryEcho_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreaming",
			Handler:       _Example_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreaming",
			Handler:       _Example_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStreaming",
			Handler:       _Example_BidiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
